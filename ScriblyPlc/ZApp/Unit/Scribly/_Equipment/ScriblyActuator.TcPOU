<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ScriblyActuator" Id="{0ba1a94e-766c-4900-ae24-276edbd4281d}" SpecialFunc="None">
    <Declaration><![CDATA[/// This function block is a container for all actuator objects that are used by this unit.
/// The parent of all objects can be directly transfered in their constructor (this is only relevant for equipment objects
/// that have to be managed (e.g. [DebouncedInput](xref:ZEquipment.DebouncedInput), [Light](xref:ZEquipment.Light), ...).
FUNCTION_BLOCK ScriblyActuator EXTENDS ScriblyContainer
VAR
  {attribute 'hide'}
  _actuatorbridge : ZApplication.ActuatorBridge(_parent);
  {attribute 'hide'}
  _iobridge : ZApplication.IoBridge(_parent);
END_VAR
VAR_INPUT

{region "Pen : ActuatorDigitalBiLsPlusMinus"}
  Pen : ScriblyActuatorPen(_parent);
  {attribute 'ZId' := '715ceec0-4c65-4cb8-884b-f54d8c494ea5'}
{endregion}

{attribute '__ZwPlcUnitEquipmentDeclaration__'} // Do not remove this attribute! It is used for code generation.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF _isInitialized
THEN
  RETURN;
END_IF

  _actuatorbridge.SetLogger(_parent._logger);

{region "Pen : ActuatorDigitalBiLsPlusMinus"}
  Pen.SetLogger(_parent._logger);
  Pen.SetName(name:='Pen', movePlusName:='Up', moveMinusName:='Down', plusName:='IsUp', minusName:='IsDown');
  Pen.SetSimulation(SEL(_parent._data.Config.Simulated, ActuatorDigitalSimulation.Disabled, ZEquipment.ActuatorDigitalSimulation.Automatic));
  Pen.SetSimulationUncertainty(uncertainty:=10);
  Pen.SetDelay(plusStartDuration:=0, plusEndDuration:=0, minusStartDuration:=0, minusEndDuration:=0, stop:=0);
  Pen.SetSwitchDuration(plusDuration:=0.2, minusDuration:=0.2);
  Pen.SetMovementDuration(plusDuration:=3, minusDuration:=3);
  Pen.SetTimeout(plusDuration:=5, minusDuration:=5);
  _actuatorbridge.AddActuatorDigital(Pen, publish := _parent._com.Publish.Equipment.Pen, subscribe := _parent._com.Subscribe.Equipment.Pen);
  _iobridge.AddDigitalOutput(Pen.MinusOutput, publish := _parent._com.Publish.Equipment.PenDown, subscribe := _parent._com.Subscribe.Equipment.PenDown);
  _iobridge.AddDigitalOutput(Pen.PlusOutput, publish := _parent._com.Publish.Equipment.PenUp, subscribe := _parent._com.Subscribe.Equipment.PenUp);
  _iobridge.AddDigitalInput(Pen.MinusInput, publish := _parent._com.Publish.Equipment.PenIsDown, subscribe := _parent._com.Subscribe.Equipment.PenIsDown);
  _iobridge.AddDigitalInput(Pen.PlusInput, publish := _parent._com.Publish.Equipment.PenIsUp, subscribe := _parent._com.Subscribe.Equipment.PenIsUp);
  {region "UserInitCode"}
  // put your individual init code for this Actuator here
  {endregion}

  {attribute 'ZId' := '715ceec0-4c65-4cb8-884b-f54d8c494ea5'}
{endregion}

{attribute '__ZwPlcUnitEquipmentImplementation__'} // Do not remove this attribute! It is used for code generation.

_isInitialized := TRUE;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>